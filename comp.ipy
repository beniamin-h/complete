from __future__ import print_function
import traceback, re

ip = get_ipython()
ns_ref = [None]

def get_completer_func_namespaced(_ns_ref):
    re_obj = re.compile('.*?([a-z0-9_\[\'\]\-]+)$', re.IGNORECASE)
    try:
        unicode
    except:
        unicode = str

    def completer(_, bunch):
        try:
            elem = _ns_ref[0]
            cmd = re_obj.match(bunch.text_until_cursor).group(1)
            enclosed = cmd.endswith("']")
            if not cmd.endswith("['") and cmd.endswith("'"):
                return [']']
            paths = [path.replace("']", '') for path in cmd.split("['")]
            cnt = 0
            while cnt < len(paths) - 1:
                if isinstance(elem.get(paths[cnt]), dict):
                    elem = elem.get(paths[cnt])
                    cnt += 1
                else:
                    break
            if enclosed:
                value = elem.get(paths[cnt])
                if isinstance(value, dict):
                    return ["['"]
                elif isinstance(value, (type(None), str, int, float, bool, unicode)):
                    print('\n\x1b[1mScalar value:\x1b[32m %s\x1b[0m' % value, end='')
                    return ['']
                else:
                    print('\n\x1b[1mValue\x1b[34m %s\x1b[0m' % type(value), end='')
                    return ['']
            return elem.keys() or ['']
        except Exception as e:
            traceback.print_exc()
            print('\nERROR', e)
            return ['']
    return completer

def compl(ns):
    ns_ref[0] = ns

ip.set_hook('complete_command', get_completer_func_namespaced(ns_ref), re_key=".*\[\'")

